{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import random\n",
    "from lib2to3.pygram import pattern_symbols\n",
    "from pathlib import Path\n",
    "from tracemalloc import get_traceback_limit\n",
    "\n",
    "import monai\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import toml\n",
    "import torch\n",
    "from torch.utils.data.dataset import Dataset\n",
    "\n",
    "def get_train_tfms(seed=42):\n",
    "    transforms = monai.transforms.Compose([\n",
    "        monai.transforms.RandSpatialCropd(keys=['img'], roi_size=(120, 120, 120), random_size=True),\n",
    "        monai.transforms.Resized(keys=['img'], spatial_size=(128, 128, 128), mode=['area', 'nearest']),\n",
    "        monai.transforms.RandFlipd(keys=['img'], prob=0.5, spatial_axis=0),\n",
    "        monai.transforms.RandFlipd(keys=['img'], prob=0.5, spatial_axis=1),\n",
    "        monai.transforms.RandFlipd(keys=['img'], prob=0.5, spatial_axis=2),\n",
    "        monai.transforms.RandAdjustContrastd(keys=\"img\", prob=0.7, gamma=(0.5, 2.5)),\n",
    "        monai.transforms.RandShiftIntensityd(keys=\"img\", offsets=0.125, prob=0.7),\n",
    "        monai.transforms.ToTensor(dtype=torch.float),\n",
    "    ])\n",
    "    transforms.set_random_state(seed)\n",
    "    return transforms\n",
    "\n",
    "\n",
    "def get_test_tfms(seed=42):\n",
    "    transforms = monai.transforms.Compose([monai.transforms.ToTensor(dtype=torch.float)])\n",
    "    transforms.set_random_state(seed)\n",
    "    return transforms\n",
    "\n",
    "def get_datasets(val_split=0.05, seed=42):\n",
    "    # val_paths = []\n",
    "    # brats_dir = Path('/dhc/home/youngbin.ko/brain_data/data')\n",
    "    # for subfolder in (brats_dir / 'val').glob('BraTS20_Validation_*'):\n",
    "    #   val_paths.extend(list(subfolder.glob('*.nii.gz')))\n",
    "    #   print(val_paths)\n",
    "\n",
    "    # val_dataset = BratsDataset(val_paths, get_test_tfms(seed=seed))\n",
    "\n",
    "    train_paths = []\n",
    "    brats_dir = Path('/dhc/home/youngbin.ko/brain_data/data')\n",
    "    for subfolder in (brats_dir / 'train_for_guassian_120').glob('BraTS20_Training_*'):\n",
    "      train_paths.extend(list(subfolder.glob('*.nii.gz')))\n",
    "      #print(train_paths)\n",
    "\n",
    "    train_dataset = BratsDataset(train_paths, get_test_tfms(seed=seed))\n",
    "\n",
    "    #return train_dataset, valid_dataset\n",
    "    return train_dataset\n",
    "\n",
    "\n",
    "class BratsDataset(Dataset):\n",
    "    def __init__(self, paths, tfms=None):\n",
    "        self.tfms = tfms\n",
    "        self.paths = paths\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.paths)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        t1_path = self.paths[idx]\n",
    "        t2_path = t1_path.parent / t1_path.name.replace('t1.nii.gz', 't2.nii.gz')\n",
    "        t1ce_path = t1_path.parent / t1_path.name.replace('t1.nii.gz', 't1ce.nii.gz')\n",
    "        flair_path = t1_path.parent / t1_path.name.replace('t1.nii.gz', 'flair.nii.gz')\n",
    "\n",
    "        patient_id = t1_path.stem.split('_t1')[0]\n",
    "\n",
    "        paths = [t1_path, t2_path, t1ce_path, flair_path]\n",
    "        imgs = [load_and_scale(path) for path in paths]\n",
    "        img = np.stack(imgs)\n",
    "\n",
    "        if self.tfms:\n",
    "            transformed = self.tfms({'img': img})\n",
    "            img = transformed['img']\n",
    "\n",
    "        return img, patient_id\n",
    "\n",
    "\n",
    "def load_and_scale(path):\n",
    "    img = np.load(path)\n",
    "    img = (img - img.min()) / (img.max() - img.min())\n",
    "    return img\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    #train_dataset, valid_dataset, test_dataset = get_datasets()\n",
    "    train_dataset = get_datasets()\n",
    "    train_dataset[0]\n",
    "    print('succes')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_paths = []\n",
    "brats_dir = Path('/dhc/home/youngbin.ko/brain_data/data/val')\n",
    "for subfolder in brats_dir.glob('BraTS20_Validation_*'):\n",
    "  print(subfolder)\n",
    "  test_paths.extend(list(subfolder.glob('*.nii.gz')))\n",
    "# test_paths = list((brats_dir / 'val').glob('*.nii.gz'))\n",
    "\n",
    "#print(test_paths)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "glowenv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.15"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "1ecb43bb3e0fcfd68c57e2963578c3d51573b5e550677459e896d951baeede56"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
